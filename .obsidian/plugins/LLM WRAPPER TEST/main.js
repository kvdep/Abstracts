/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LLMWrapperPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  geminiApiKeyEnvVar: "",
  lmStudioUrl: "http://localhost:1234/v1/chat/completions",
  currentModel: "gemini",
  contextLinesUp: 10,
  contextLinesDown: 10,
  blastRadiusLinesUp: 5,
  blastRadiusLinesDown: 5
};
var LLMWrapperPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "llm-process-text",
      name: "Process Text with LLM",
      editorCallback: (editor, view) => {
        this.processTextWithLLM(editor);
      },
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "p" }]
      // Example hotkey: Cmd/Ctrl + Shift + P
    });
    this.addCommand({
      id: "switch-llm-model",
      name: "Switch LLM Model",
      callback: () => {
        this.settings.currentModel = this.settings.currentModel === "gemini" ? "lmstudio" : "gemini";
        this.saveSettings();
        new import_obsidian.Notice(`Switched to ${this.settings.currentModel} model.`);
      },
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "m" }]
      // Example hotkey: Cmd/Ctrl + Shift + M
    });
    this.addSettingTab(new LLMWrapperSettingTab(this.app, this));
  }
  // This is called when the plugin is disabled
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // The main function to process text
  async processTextWithLLM(editor) {
    const cursor = editor.getCursor();
    const lastLine = editor.lastLine();
    const contextStartLine = Math.max(0, cursor.line - this.settings.contextLinesUp);
    const contextEndLine = Math.min(lastLine, cursor.line + this.settings.contextLinesDown);
    const contextText = editor.getRange(
      { line: contextStartLine, ch: 0 },
      { line: contextEndLine, ch: editor.getLine(contextEndLine).length }
    ).trim();
    new import_obsidian.Notice(`Sending context to ${this.settings.currentModel}...`);
    let llmResponseText;
    try {
      if (this.settings.currentModel === "lmstudio") {
        const response = await (0, import_obsidian.request)({
          url: this.settings.lmStudioUrl,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            // LM Studio uses an OpenAI-compatible API.
            // The 'messages' format is standard.
            messages: [
              { role: "system", content: "You are a helpful writing assistant. You will be given a block of text and you should return it, but improved. Only return the changed text, without any introductory phrases." },
              { role: "user", content: contextText }
            ],
            temperature: 0.7,
            // A parameter to control creativity
            stream: false
            // We want the full response at once
          })
        });
        const jsonResponse = JSON.parse(response);
        llmResponseText = jsonResponse.choices[0].message.content;
      } else if (this.settings.currentModel === "gemini") {
        new import_obsidian.Notice("Gemini API call is not yet implemented.");
        llmResponseText = "/* Gemini API call not implemented. */\n" + contextText;
      } else {
        new import_obsidian.Notice(`Error: Unknown model selected: ${this.settings.currentModel}`);
        return;
      }
    } catch (error) {
      console.error("LLM API call failed:", error);
      new import_obsidian.Notice("Error: Could not connect to the LLM. Is the server running?");
      return;
    }
    const blastRadiusStartLine = Math.max(0, cursor.line - this.settings.blastRadiusLinesUp);
    const blastRadiusEndLine = Math.min(lastLine, cursor.line + this.settings.blastRadiusLinesDown);
    const originalBlastRadiusText = editor.getRange(
      { line: blastRadiusStartLine, ch: 0 },
      { line: blastRadiusEndLine, ch: editor.getLine(blastRadiusEndLine).length }
    );
    new DiffModal(this.app, originalBlastRadiusText, llmResponseText, (acceptedChanges) => {
      if (acceptedChanges) {
        editor.replaceRange(
          llmResponseText,
          { line: blastRadiusStartLine, ch: 0 },
          { line: blastRadiusEndLine, ch: editor.getLine(blastRadiusEndLine).length }
        );
        new import_obsidian.Notice("Changes accepted.");
      } else {
        new import_obsidian.Notice("Changes discarded.");
      }
    }).open();
  }
};
var LLMWrapperSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "LLM Wrapper Settings" });
    new import_obsidian.Setting(containerEl).setName("Gemini API Key Environment Variable").setDesc("The name of the environment variable holding your Gemini API key.").addText((text) => text.setPlaceholder("Enter environment variable name").setValue(this.plugin.settings.geminiApiKeyEnvVar).onChange(async (value) => {
      this.plugin.settings.geminiApiKeyEnvVar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("LM Studio Server URL").setDesc("The URL for your local LM Studio server.").addText((text) => text.setPlaceholder("http://localhost:1234/v1/chat/completions").setValue(this.plugin.settings.lmStudioUrl).onChange(async (value) => {
      this.plugin.settings.lmStudioUrl = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Context and Blast Radius" });
    new import_obsidian.Setting(containerEl).setName("Context Lines Up").addText((text) => text.setValue(this.plugin.settings.contextLinesUp.toString()).onChange(async (value) => {
      this.plugin.settings.contextLinesUp = parseInt(value) || 10;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Context Lines Down").addText((text) => text.setValue(this.plugin.settings.contextLinesDown.toString()).onChange(async (value) => {
      this.plugin.settings.contextLinesDown = parseInt(value) || 10;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Blast Radius Lines Up").addText((text) => text.setValue(this.plugin.settings.blastRadiusLinesUp.toString()).onChange(async (value) => {
      this.plugin.settings.blastRadiusLinesUp = parseInt(value) || 5;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Blast Radius Lines Down").addText((text) => text.setValue(this.plugin.settings.blastRadiusLinesDown.toString()).onChange(async (value) => {
      this.plugin.settings.blastRadiusLinesDown = parseInt(value) || 5;
      await this.plugin.saveSettings();
    }));
  }
};
var DiffModal = class extends import_obsidian.Modal {
  constructor(app, originalText, newText, onSubmit) {
    super(app);
    this.originalText = originalText;
    this.newText = newText;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "LLM Suggestions" });
    contentEl.createEl("h4", { text: "Original Text" });
    contentEl.createEl("pre", { text: this.originalText });
    contentEl.createEl("h4", { text: "New Text" });
    contentEl.createEl("pre", { text: this.newText });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    const acceptButton = buttonContainer.createEl("button", { text: "Accept", cls: "mod-cta" });
    acceptButton.addEventListener("click", () => {
      this.onSubmit(true);
      this.close();
    });
    const discardButton = buttonContainer.createEl("button", { text: "Discard" });
    discardButton.addEventListener("click", () => {
      this.onSubmit(false);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
